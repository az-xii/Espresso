from re import A
from AST import *

program = Body([])

program.add_statement(
    ClassNode(
        name=Identifier("Vector"),
        body=[
            VarDeclare(
                name=Identifier("x"),
                type=Identifier("float")
            ),
            VarDeclare(
                name=Identifier("y"),
                type=Identifier("float")
            ),
            Identifier("public:"),
            FunctionDecl(
                name="Vector",
                params=[
                    FuncDeclParam(name=Identifier("x")),
                    FuncDeclParam(name=Identifier("y")),
                ],
                body=[
                    VarAssign(
                        target=Identifier("this.x"),
                        value=Identifier("x")
                    ),
                    VarAssign(
                        target=Identifier("this.y"),
                        value=Identifier("y")
                    )
                ]
            ),
            FunctionDecl(
                name=Identifier("operator+"),
                params=[
                    FuncDeclParam(
                        name=Identifier("other"),
                        type=Identifier("Vector")
                    )
                ],
                body=[
                    Return(
                        value=FunctionCall(
                            target=Identifier("Vector"),
                            params=[
                                FuncCallParam(value=ArithmeticExpression(
                                    left=Identifier("this.x"),
                                    operator="+",
                                    right=Identifier("other.x")
                                )),
                                FuncCallParam(value=ArithmeticExpression(
                                    left=Identifier("this.y"),
                                    operator="+",
                                    right=Identifier("other.y")
                                ))
                            ]
                        )
                    )
                ]
            ),
            FunctionDecl(
                name=Identifier("ToString"),
                body=[
                    Return(
                        InterpolatedStringLiteral(
                            parts=[
                                "Vector(",
                                Identifier("this.x"),
                                ", ",
                                Identifier("this.y"),
                                ")"
                            ]
                        )
                    )
                ]
            ),
            FunctionDecl(
                name=Identifier("magnitude"),
                return_type=Identifier("float"),
                body=[
                    Return(
                        value=FunctionCall(
                            target=Identifier("Math::Sqrt"),
                            params=[
                                FuncCallParam(value=ArithmeticExpression(
                                    left=ArithmeticExpression(
                                        left=Identifier("this.x"),
                                        operator="*",
                                        right=Identifier("this.x")
                                    ),
                                    operator="+",
                                    right=ArithmeticExpression(
                                        left=Identifier("this.y"),
                                        operator="*",
                                        right=Identifier("this.y")
                                    )
                                ))
                            ]
                        )
                    )
                ]
            )
        ]
    )
)

program.add_statement(
    FunctionDecl(
        name="calculate_factorial",
        params=[
            FuncDeclParam(name=Identifier("n"), type=Identifier("int"))
        ],
        body=[
            IfExpr(
                
            ),
            Return(
                value=TernaryExpr(
                    condition=Comparison(
                        left=Identifier("n"),
                        operator="<=",
                        right=Literal(1)
                    ),
                    true_value=Literal(1),
                    false_value=ArithmeticExpression(
                        left=Identifier("n"),
                        operator="*",
                        right=FunctionCall(
                            target=Identifier("calculate_factorial"),
                            params=[
                                FuncCallParam(value=ArithmeticExpression(
                                    left=Identifier("n"),
                                    operator="-",
                                    right=Literal(1)
                                ))
                            ]
                        )
                    )
                )
            )

        ]
    )
)

program.add_statement(
    FunctionDecl(
        name=Identifier("main"),
        return_type=Identifier("int"),
        body=[
            VarAssign(
                target=Identifier("v1"),
                value=FunctionCall(
                    target=Identifier("Vector"),
                    params=[
                        FuncCallParam(value=NumericLiteral("3")),
                        FuncCallParam(value=NumericLiteral("4"))
                    ]
                )
            ),
            VarAssign(
                target=Identifier("v2"),
                value=FunctionCall(
                    target=Identifier("Vector"),
                    params=[
                        FuncCallParam(value=NumericLiteral("2")),
                        FuncCallParam(value=NumericLiteral("5"))
                    ]
                )
            ),
            FunctionCall(
                target=Identifier("io::WriteLine"),
                params=[
                    FuncCallParam(
                        value=InterpolatedStringLiteral(
                            parts=[
                                "Vector sum:",
                                ArithmeticExpression(
                                    left=Identifier("v1"),
                                    operator="+",
                                    right=Identifier("v2")
                                )
                            ]
                        )
                    )
                ]
            ),
            FunctionCall(
                target=Identifier("io::WriteLine"),
                params=[
                    FuncCallParam(
                        value=InterpolatedStringLiteral(
                            parts=[
                                "Vector sum:",
                                ArithmeticExpression(
                                    left=Identifier("v1"),
                                    operator="+",
                                    right=Identifier("v2")
                                )
                            ]
                        )
                    )
                ]
            ),
            FunctionCall(
                target=Identifier("io::WriteLine"),
                params=[
                    FuncCallParam(
                        value=InterpolatedStringLiteral(
                            parts=[
                                "Vector sum:",
                                ArithmeticExpression(
                                    left=Identifier("v1"),
                                    operator="+",
                                    right=Identifier("v2")
                                )
                            ]
                        )
                    )
                ]
            ),
            TryCatch(
                try_body=[
                    FunctionCall(
                        target=Identifier("io::WriteLine"),
                        params=[
                            FuncCallParam(
                                value=InterpolatedStringLiteral(
                                    parts=[
                                        "Vector v1:",
                                        Identifier("v1.ToString()")
                                    ]
                                )
                            )
                        ]
                    )
                ],
                catch_blocks=[
                    (Identifier("std::exception"), Body([
                        FunctionCall(
                            target=Identifier("io::WriteLine"),
                            params=[
                                FuncCallParam(
                                    value=InterpolatedStringLiteral(
                                        parts=[
                                            "Exception occurred: ",
                                            Identifier("std::exception::what()")
                                        ]
                                    )
                                )
                            ]
                        )
                    ]))
                ],
            ),
            NewLine(),
            VarAssign(
                var_name=Identifier("name"),
                value=ItemContainerLiteral(
                    items=[
                    NormalStringLiteral("Alice"),
                    NormalStringLiteral("Bob"),
                    NormalStringLiteral("Charlie")
                    ]
                ),
                type=Identifier("list[string]")
            ),
            ForInLoop(
                var_name=Identifier("name"),
                iterable=Identifier("name"),
                body=[
                    FunctionCall(
                        target=Identifier("io::WriteLine"),
                        params=[
                            FuncCallParam(
                                value=InterpolatedStringLiteral(
                                    parts=[
                                        "Hello, ",
                                        Identifier("name"),
                                        "!"
                                    ]
                                )
                            )
                        ]
                    )
                ]
            ),
        ]
    )
)